// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductService.Models;

namespace ProductService.Migrations
{
    [DbContext(typeof(ProductContext))]
    [Migration("20181226024418_CreateDB")]
    partial class CreateDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProductService.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName");

                    b.Property<int>("AccountType");

                    b.Property<string>("Address");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Lock");

                    b.Property<string>("Password");

                    b.Property<string>("Phone");

                    b.Property<int?>("RatingId");

                    b.Property<string>("Token");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RatingId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ProductService.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Archive");

                    b.Property<string>("CategoryName");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ProductService.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ProductService.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Archive");

                    b.Property<string>("Author");

                    b.Property<int>("Bought");

                    b.Property<string>("Detail");

                    b.Property<int>("Discount");

                    b.Property<bool>("Is_Active");

                    b.Property<string>("Languge");

                    b.Property<string>("Name");

                    b.Property<int>("Price");

                    b.Property<int>("Quantity");

                    b.Property<int?>("RatingId");

                    b.HasKey("Id");

                    b.HasIndex("RatingId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ProductService.Models.Product_Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Archive");

                    b.Property<int>("CategoryID");

                    b.Property<bool>("Is_Active");

                    b.Property<int>("ProductID");

                    b.HasKey("Id");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ProductID");

                    b.ToTable("Product_Categories");
                });

            modelBuilder.Entity("ProductService.Models.Product_Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Archive");

                    b.Property<int>("ImageID");

                    b.Property<int>("ProductID");

                    b.HasKey("Id");

                    b.HasIndex("ImageID");

                    b.HasIndex("ProductID");

                    b.ToTable("Product_Images");
                });

            modelBuilder.Entity("ProductService.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountID");

                    b.Property<string>("Comment");

                    b.Property<bool>("Is_Active");

                    b.Property<int>("ProductID");

                    b.Property<int>("Star");

                    b.HasKey("Id");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("ProductService.Models.Account", b =>
                {
                    b.HasOne("ProductService.Models.Rating")
                        .WithMany("Accounts")
                        .HasForeignKey("RatingId");
                });

            modelBuilder.Entity("ProductService.Models.Product", b =>
                {
                    b.HasOne("ProductService.Models.Rating")
                        .WithMany("Products")
                        .HasForeignKey("RatingId");
                });

            modelBuilder.Entity("ProductService.Models.Product_Category", b =>
                {
                    b.HasOne("ProductService.Models.Category", "Category")
                        .WithMany("Product_Categories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProductService.Models.Product", "Product")
                        .WithMany("Product_Categories")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProductService.Models.Product_Image", b =>
                {
                    b.HasOne("ProductService.Models.Image", "Image")
                        .WithMany("Product_Images")
                        .HasForeignKey("ImageID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProductService.Models.Product", "Product")
                        .WithMany("Product_Images")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
